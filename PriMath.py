# print(17.1, 21.4, 15.9, 19.1, 22.4, 20.7, 17.9, 18.6, 21.8, 16.1, 19.1, 20.5, 14.2, 16.9, 17.8, 18.1,
#       19.1, 15.8, 18.8, 17.2, 16.2, 17.3, 22.5, 19.9, 21.1, 15.1, 17.7, 19.8, 14.9, 20.5, 17.5, 19.2,
#       18.5, 15.7, 14.0, 18.6, 21.2, 16.8, 19.3, 17.8, 18.8, 14.3, 17.1, 19.5, 16.3, 20.3, 17.9, 23.0,
#       17.2, 15.2, 15.6, 7.4, 21.3, 22.1, 20.1, 14.5, 19.3, 18.4, 16.7, 18.2, 16.4, 18.7, 14.3, 18.2,
#       19.1, 15.3, 21.5, 17.2, 22.6, 20.4, 22.8, 17.5, 20.2, 15.5, 21.6, 18.1, 20.5, 14.0, 18.9, 16.5,
#       20.8, 16.6, 18.3, 21.7)
import numpy as np
from scipy.stats import mode  # Мода
from scipy.stats import kurtosis  # Эксцесс
from scipy.stats import skew  # ассиметричность
import matplotlib.pyplot as plt
import math

a = ([17.1, 21.4, 15.9, 19.1, 22.4, 20.7, 17.9, 18.6, 21.8, 16.1, 19.1, 20.5, 14.2, 16.9, 17.8, 18.1,
      19.1, 15.8, 18.8, 17.2, 16.2, 17.3, 22.5, 19.9, 21.1, 15.1, 17.7, 19.8, 14.9, 20.5, 17.5, 19.2,
      18.5, 15.7, 14.0, 18.6, 21.2, 16.8, 19.3, 17.8, 18.8, 14.3, 17.1, 19.5, 16.3, 20.3, 17.9, 23.0,
      17.2, 15.2, 15.6, 7.4, 21.3, 22.1, 20.1, 14.5, 19.3, 18.4, 16.7, 18.2, 16.4, 18.7, 14.3, 18.2,
      19.1, 15.3, 21.5, 17.2, 22.6, 20.4, 22.8, 17.5, 20.2, 15.5, 21.6, 18.1, 20.5, 14.0, 18.9, 16.5,
      20.8, 16.6, 18.3, 21.7])  # Выборка Вар.1
# a = [0, 2, 1, 2.6, 3.1, 4.6, 1, 4.6, 6, 2.6, 6, 7, 8, 8, 2.6]
a.sort()  # Вариационный ряд
n = int(len(a))  # Количество элементов в выборке
# print(a)
np_a = np.array(a)  # Вариационный ряд в numpy массиве

# _____Вычисления______#
## 1
# 1.1 График эмпирической функции распределения
x2 = []
y2 = []
y = 0
for x in np_a:
    x2.extend([x, x])
    y2.append(y)
    y += 1.0 / n
    y2.append(y)
plt.plot(x2, y2)  # сопоставить
plt.show()
plt.clf()  # очистить

# 1.2 Гистограмма
# k = int(1 + 3.322 * math.log10(n))  # Число столбцов (не из книги)
k = math.pow(n, 1 / 3)  # Число столбцов (из книги)
k = int(np.ceil(k))  # Количество столбцов
begin = np.min(np_a)
step = (np.max(np_a) - np.min(np_a)) / k

A = []  # объявим массив для группировки данных
for i in range(k):
    A.append([])

f = []  # высоты столбцов
i = 0
for j in a:
    if j <= begin + step:
        A[i].append(j)
    else:
        while j > begin + step:
            i += 1
            begin += step
        A[i].append(j)
for x in A:
    f.append(len(x))
print(A)
f_len = range(len(f))

ax = plt.gca()
ax.bar(f_len, f, align='edge')  # align='edge' - выравнивание по границе, а не по центру
ax.set_xticks(f_len)
ax.set_xticklabels(('first', 'second', 'third', 'fourth', 'fifth'))  # Сделано вручную
# 'sixth', 'seventh', 'eighth', 'ninth', 'tenth'
plt.show()
plt.clf()

## 2
# 2.1 Среднее значение выборки
A_mean = np_a.mean()  # np_a.sum() / n
print("Среднее значение выборки:", A_mean)

# 2.2 Выборочная дисперсия
A_dispersion = np.sum((np_a - A_mean)**2) / (n-1)
print("Выборочная дисперсия:", A_dispersion)

# 2.4 Стандартное отклонение
A_SD = np.sqrt( ((np.sum(np_a-A_mean))**2) / (n-1))
print("Стандартное отклонение:", A_SD)

# 2.5 Стандартная ошибка
A_SEM = A_SD / math.sqrt(n)
print("Стандартная ошибка:", A_SEM)

# 2.6 Мода
A_mode = mode(np_a)[0][0]
print("Мода:", A_mode)

# 2.7 Медиана
A_Me = np.median(np_a)  # в отсортированном: если нечётное, то среднее число, иначе сумма двух посередине делённая на 2
print("Медиана:", A_Me)

# 2.8 Первый, второй, и третий квартили | 50 процентиля - это медиана
#Делим отсортированный массив на две части и находим медианы -> 1 и 3 квартили
A_Q1 = np.median(np.split(np_a, 2)[0])
A_Q2 = A_Me
A_Q3 = np.median(np.split(np_a, 2)[1])
print("Первый, второй и третий Квартили:", A_Q1, ",", A_Q2, ",", A_Q3)

# 2.9 Ящик с усами (диаграмма размаха)
# {ящик - диапазон среднего значения,
# "усы" показывают меру разброса результатов вокруг средней результативности (стандартное отклонение)}
# границы ящика - 25 и 75 процентили, усы - макс и мин значения выборки (мин значимой части данных, получается),
# выбросы - значения далеко от статистически значимой части данных
# оранжевая полоса - медиана
plt.boxplot(np_a)
plt.show()
plt.clf()

# 2.10 Эксцесс
A_kurt = kurtosis(np_a, fisher=False) #normal ==> 3.0
print("Эксцесс:", A_kurt)

# 2.11 Ассиметричность #(среднее+ - мода+) / (среднее квадратичное отклонение-) © Пирсон
A_skewness = skew(np_a)
print("Ассиметричность:", A_skewness)

# 2.12 Максимум, минимум
max, min = np.max(np_a), np.min(np_a)
print("Минимум и максимум:", min, "и", max)